from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QPushButton, QComboBox
from PyQt5.QtCore import Qt, QTimer
from service.diagnose_service import update_diagnose

class FollowUpDialog(QDialog):
    def __init__(self, followup_data: dict, protocol_number: str, parent=None):
        super().__init__(parent)
        self.protocol_number = protocol_number # hangi te≈ühis kaydƒ± i√ßin √ßalƒ±≈üƒ±yoruz onu tutuyoruz

        # cevaplarƒ± tutulacak deƒüi≈ükenler
        self.did_you_take_medicine = None
        self.are_you_healed = None
        self.satisfaction_level = None

        # Dialog penceresinin √∂zellikleri
        self.setWindowTitle("Takip Sorularƒ±")
        self.setMinimumSize(400, 300)

        # JSON'dan gelen takip sorularƒ±nƒ± y√ºkl√ºyoruz
        self.data = followup_data
        self.current_node = self.data["Follow up Questions"]

        # Ana layout'u ba≈ülatƒ±yoruz
        self.layout = QVBoxLayout(self)
        self.layout.setSpacing(15)

        # √ústteki bilgilendirme etiketi
        self.label = QLabel("Takip sorularƒ±nƒ± cevaplayƒ±n:")
        self.label.setAlignment(Qt.AlignCenter) # ortaya hizala
        self.label.setStyleSheet("font-size: 16px; font-weight: bold; padding: 5px;")
        self.layout.addWidget(self.label)

        # Ana soru
        self.question_label = QLabel("")
        self.question_label.setAlignment(Qt.AlignCenter) # ortaya hizala
        self.question_label.setStyleSheet("font-size: 18px; padding: 8px; color: #222;")
        self.layout.addWidget(self.question_label)

        # Geri sayƒ±m alanƒ±
        self.countdown_label = QLabel("")
        self.countdown_label.setAlignment(Qt.AlignCenter) # ortaya hizala
        self.countdown_label.setStyleSheet("font-size: 14px; color: gray;")
        self.layout.addWidget(self.countdown_label)

        # Evet / Hayƒ±r butonlarƒ±
        self.yes_button = QPushButton("Evet")
        self.no_button = QPushButton("Hayƒ±r")
        # iki buton i√ßin de bu √∂zellikleri ekle:
        for btn in (self.yes_button, self.no_button):
            btn.setStyleSheet("font-size: 15px; padding: 8px 20px;")
            btn.setVisible(False) # butonlarƒ± gizle
            self.layout.addWidget(btn, alignment=Qt.AlignCenter) # ortaya hizala

        # Butonlara tƒ±klanƒ±nca hangi fonksiyon √ßalƒ±≈üacak onlarƒ± belirliyoruz
        self.yes_button.clicked.connect(lambda: self.handle_answer("yes")) # handle_answer() fonksiyonu (param=yes)
        self.no_button.clicked.connect(lambda: self.handle_answer("no")) # handle_answer() fonksiyonu (param=no)

        # Skor se√ßimi i√ßin combobox
        self.score_combo = QComboBox()
        self.score_combo.addItems(["1", "2", "3", "4", "5"]) # 1-5 arasƒ± skorlar
        self.score_combo.setStyleSheet("font-size: 15px; padding: 4px;")
        self.score_combo.setVisible(False)

        # Skor g√∂nderme butonu
        self.submit_score = QPushButton("üíæ G√∂nder")
        self.submit_score.setStyleSheet("font-size: 15px; padding: 8px 20px;")
        self.submit_score.setVisible(False) # butonu gizle

        self.layout.addWidget(self.score_combo, alignment=Qt.AlignCenter) # ortaya hizalayarak layout'a ekle
        self.layout.addWidget(self.submit_score, alignment=Qt.AlignCenter) # ortaya hizalayarak layout'a ekle

        # Skor g√∂nder butonuna tƒ±klanƒ±nca √ßalƒ±≈üan fonksiyon
        self.submit_score.clicked.connect(self.submit_score_selected)

        # ƒ∞lk soruyla ba≈üla
        self.show_question(self.current_node)

    def show_question(self, node):
        """Gelen node'a g√∂re yeni soru veya mesaj g√∂sterimi yapar."""
        if isinstance(node, str):
            # Bu bir sonu√ß mesajƒ±ysa (t√ºm butonlarƒ± gizle  ve node'u ekrana yazdƒ±r)
            self.question_label.setText(node)
            self.yes_button.setVisible(False)
            self.no_button.setVisible(False)
            self.score_combo.setVisible(False)
            self.submit_score.setVisible(False)
            self.start_countdown(2) # 2 saniyelik geri sayƒ±m ba≈ülatƒ±yoruz
        elif isinstance(node, dict):
            # eƒüer bir soru mesajƒ±ysa
            self.countdown_label.setText("")
            question = list(node.keys())[0] # soruyu al
            self.question_label.setText(question) # soruyu ekranda g√∂ster
            self.current_question = question
            self.current_node = node[question]

            # Skor sorusu mu?
            if all(k in ["1", "2", "3", "4", "5"] for k in self.current_node.keys()):
                # evet ise yes no butonlarƒ±nƒ± gizle, score ve submit butonlarƒ±nƒ± g√∂ster
                self.yes_button.setVisible(False)
                self.no_button.setVisible(False)
                self.score_combo.setVisible(True)
                self.submit_score.setVisible(True)
            else:
                # hayƒ±r ise score submit butonlarƒ±nƒ± gizle, yes no butonlarƒ±nƒ± g√∂ster
                self.score_combo.setVisible(False)
                self.submit_score.setVisible(False)
                self.yes_button.setVisible("yes" in self.current_node)
                self.no_button.setVisible("no" in self.current_node)

    def handle_answer(self, answer):
        """Evet/Hayƒ±r cevabƒ±na g√∂re y√∂nlendirme yapar ve gerekli verileri toplar."""

        if self.current_question == "Did you take the medicine?" or self.current_question == "ƒ∞lacƒ±nƒ±zƒ± aldƒ±nƒ±z mƒ±?":
            self.did_you_take_medicine = answer

        elif self.current_question == "Are you healed" or self.current_question == "ƒ∞yile≈ütiniz mi?":
            self.are_you_healed = answer

        # sonraki soruya ge√ß
        next_node = self.current_node.get(answer)
        self.show_question(next_node)

    def submit_score_selected(self):
        """Skor g√∂nderildiƒüinde veritabanƒ±na kaydeder ve sonucu g√∂sterir."""
        score = int(self.score_combo.currentText())
        self.satisfaction_level = score

        # final mesajƒ±nƒ± g√∂ster
        final_message = self.current_node.get(str(score), "Te≈üekk√ºrler!")
        self.show_question(final_message)

        # veritabanƒ±nda g√ºncelleme yap
        result_message = update_diagnose(self.are_you_healed, self.satisfaction_level, self.protocol_number)
        self.label.setText(result_message)

        # pencereyi 2 saniye i√ßinde kapat
        self.start_countdown(2)

    def start_countdown(self, seconds):
        """Dialog'u belirli saniye sonra otomatik kapatƒ±r."""
        self.remaining_seconds = seconds
        self.countdown_label.setText(f"Pencere {self.remaining_seconds} saniye i√ßinde kapanacak...")
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_countdown)
        self.timer.start(1000) # 1 saniyede bir g√ºncelle

    def update_countdown(self):
        """Geri sayƒ±m bitince pencereyi kapatƒ±r."""
        self.remaining_seconds -= 1
        if self.remaining_seconds > 0:
            self.countdown_label.setText(f"Pencere {self.remaining_seconds} saniye i√ßinde kapanacak...")
        else:
            self.timer.stop()
            self.accept() # Dialog'u kapat
